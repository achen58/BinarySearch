LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.all;

ENTITY binary_search_tb IS                                                   
end ENTITY;            

ARCHITECTURE t1 of binary_search_tb IS

	COMPONENT binary_search 
	 port (                                                                                         
    		clk : in std_logic;                              
    		rst : in std_logic;                              
   		    start_search : in std_logic;                     
    		search_value : in std_logic_vector(15 downto 0); 
    		search_done : out std_logic;                     
    		found : out std_logic;                           
    		index_found : out std_logic_vector(11 downto 0);     
    		occurence : out std_logic_vector(11 downto 0)
	);
	END COMPONENT;
 

	--INPUTS
    signal clk : std_logic := '1';
	signal rst : std_logic := '0';
	signal start_search : std_logic;
	signal search_value : std_logic_vector(15 downto 0);
	type INT_ARRY_TYPE is array(natural range<>) of integer; 
	constant MY_INT_ARR : INT_ARRY_TYPE(0 TO 5) := (5,6000,15307,20552,32069,65499);


	--OUTPUTS
	signal search_done : std_logic;
	signal found : std_logic;
	signal index_found : std_logic_vector(11 downto 0);
	signal occurence : std_logic_vector(11 downto 0);
	
	-- Clock
	 constant CLK_PERIOD : time := 20ns; --clock period--
	
BEGIN
	-- Instantiate the Unit Under Test(UUT)
binary_search_inst : component binary_search
	PORT MAP (
        clk => clk,
		rst => rst,
		start_search => start_search,
		search_value => search_value,
		search_done => search_done,
		found => found,
		index_found => index_found,
		occurence => occurence
	);

	-- Clock process definitions
    clk <= not clk after CLK_PERIOD/2;
    

	-- Stimulus process

	stem_proc : process
	begin
	--reset first
	rst <= '1';
	--initialize all input
	start_search <= '0';
	search_value <= (others => '0');
	
	wait for CLK_PERIOD*2;
	--release the reset
	rst <= '0';
	for i in 0 to 5 loop
	   wait until rising_edge(clk);
	   --give input
	   start_search <= '1';
	   search_value <= std_logic_vector(to_unsigned(MY_INT_ARR(i),search_value'length));
       wait until rising_edge(clk);
       start_search <= '0';
       wait until search_done = '1';
       
    end loop;
    wait;	
	end process;
end ARCHITECTURE;
		              
